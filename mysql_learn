1、给root用户添加远程连接权限
  use mysql;
  update user set host=' %' where user=' root';
  flush privileges;
2、新建用户
  create user 'zhangjun'@'%' identified by '123456';
3、查看用户权限
  show grants for zhangjun;
4、查看mysql当前连接
  show processlist;只列出前100条，如果想全列出请使用show full processlist;
5、显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息
  show columns from tables;
6、中文显示？设置：alter table table_name convert to character set utf8;原来有的数据不会变，新增数据正常显示

7、使用LIKE+通配符%表示任意个字符，_表示单个字符

8、使用MySQL正则表达式
  REGEXP关键字+表达式：select * from table1 where id regexp '.123';（.表示匹配任意一个字符）
  mysql自3.23.4版本后正则不区分大小写，若需要区分使用BINARY关键字：select * from table1 where name regexp binary 'JetPack';
  OR匹配：select * from table1 where name regexp 'JetPack|Mary|jack';
  匹配几个字符之一，匹配任意单个字符：select * from table1 where name regexp '[123] ton';（匹配1 ton,2 ton或3 ton，[^123]表示匹配除这些字符外的任意字符）
  转义特殊字符使用\\:\\f换页，\\n换行，\\r回车，\\t制表，\\v纵向制表，\\\匹配反斜杠本身
  匹配字符类：[:alnum:]  任意字母和数字（同[a-zA-Z0-9]）
             [:alpha:]  任意字母（同[a-zA-Z]）
             [:blank:]  空格和制表（同[\\t]）
             [:cntrl:]  ASCII控制字符（ASCII0到31和127）
             [:digit:]  任意数字（同[0-9]）
             [:print:]  任意可打印字符
             [:graph:]  与[:print:]形同，但不包括空格
             [:lower:]  任意小写字母（同[a-z]）
             [:punct:]  既不在[:alnum:]又不在[:cntrl:]中的任意字符
             [:space:]  包括空格在内的任意空白字符（同[\\f\\\n\\r\\t\\v]）
             [:upper:]  任意大写字母（同[A-Z]）
             [:xdigit:] 任意十六进制数字（同[a-fA-F0-9]）
  重复元字符：*  0个或多个匹配
             +  1个或多个匹配（等于{1,}）
             ?  0个或1个匹配（等于{0,1}）
             {n}  指定数目的匹配
             {n,} 不少于指定数目的匹配
             {n,m}  匹配数目的范围（m不超过255）
             例：select name from table1 where name regexp '\\([0-9] sticks?\\)';s后面的?使s可选，所以会匹配stick和sticks
                select name from table1 where id regexp '[[:digit:]]{4}';匹配连在一起的四位数字
  定位与字符：^  文本的开始（两种用法在集合[]里表示否定该集合，否则指串的开始处）
             $  文本的结尾
             [[:<:]]  词的开始
             [[:>:]]  词的结尾
       
9、拼接字段：（多数DBMS使用+或||实现拼接，而mysql使用concat()函数来实现）
            select concat(name,' (',city,')') from table1 order by name;（concat()函数使用,将多个字符串分隔）
            Trim()函数去掉串左右两边的空格，rtrim去掉右边的空格，ltrim去掉左边的空格
            
10、执行算术计算：select name,id,salary,id*salary as money from staff where name regexp '[^a-zA_Z]';（+,-,*,/）

11、文本处理函数：upper()  转换为大写
                lower()  转换为小写
                left(str,lenght)  返回串左边指定长度的字符
                right(str,lenght)  返回串右边指定长度的字符
                length() 返回串的长度
                locate() 找出串的一个子串
                substring(str, pos, length)  返回从指定位置开始指定长度的字符串，不指定长度就到结尾
                soundex()  返回串的SOUNDEX值，用来匹配发音相似的字符串？？？
       
12、日期和时间处理函数：AddDate()  增加一个日期（天、周等）
                      AddTime()  增加一个时间（时、分等）
                      CurDate()  返回当前日期
                      Curtime()  返回当前时间
                      Date()  返回日期时间的日期部分
                      DateDiff()  计算两个日期之差
                      Date_Add()  高度灵活的日期运算函数
                      Date_Format()  返回一个格式化的日期或时间串
                      Day()  返回一个日期的天数部分
                      DayOfWeek()  对于一个日期，返回对应的星期几
                      Hour()  返回一个时间的小时部分
                      Minute()  返回一个时间的分部分
                      Month()  返回一个日期的月份部分
                      Now()  返回当前日期和时间
                      Second()  返回一个时间的秒部分
                      Time()  返回一个日期的时间的时间部分
                      Year()  返回一个日期的年份部分
         示例：select * from table1 where Date(order_date) = '2022-07-31';
              select * from table1 where Date(order_date) between '2022-07-01' and '2022-07-31';
              select * from table1 where Year(order_date) = 2022 and month(order_date) = 7;
              
13、数值处理函数：Abs()  返回一个数的绝对值
                Cos()  返回一个角度的余弦
                Exp()  返回一个数的指数值
                Mod()  返回除操作的余数
                Pi()  返回圆周率
                Rand()  返回一个随机数
                Sin()  返回一个角度的正弦
                Sqrt()  返回一个数的平方根
                Tan()  返回一个角度的正切
       
14、聚集函数：AVG()  返回某列的平均值,只用于单个列并且会忽略值为null的行，若需求不忽略null可使用avg(ifnull(column_name,0))
             COUNT()  返回某列的行数,使用count(*)对表的所有行计数，使用count(column_name)只对有值的行计数忽略null值
             MAX()  返回某列的最大值，忽略值为null的行
             MIN()  返回某列的最小值，忽略值为null的行
             SUM()  返回某列值之和，忽略值为null的行
             示例：select AVG(prod_price) as avg_price from products where vend_id = 1003;
                 
15、DISTINCT去重：对单列去重也可对多列去重，对多列去重时去除指定的列值都一样的行：select distinct name,address,id form table1;（去重name,address,id三列值都一样的行）
           
16、UNION (ALL)：组合多条查询，默认去重，如果需要不去重加上ALL，使用排序时只能在最后一条select语句加order by字句，不允许使用多条order by
            
17、启用全文本搜索支持，一般在创建表时使用FULLTEXT字句启用,MyISAM引擎支持全文本搜索，默认使用的InnoDB引擎不支持。不要再导入数据时使用FULLTEXT，应该先导入所有数据，然后再修改表定义
    FULLTEXT，花费时间更少
      定义示例：CREATE TABLE table_name
               (note_id int NOT NULL AUTO_INCREMENT,
                prod_id char(10) NOT NULL,
                note_date datetime NOT NULL,
                note_text text NULL,
                PRIMARY KEY(note_id),
                FULLTEXT(note_text)) ENGINE=MyISAM;
      使用示例：select note_text from table_name where Match(note_text) Against('rabbit');默认不区分大小写，使用BINARY区分
   注意事项：
          1.在索引全文本数据时，短词被忽略且从索引中排除。短词定义为 那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。
          2.MySQL带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表
          3.许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则
            不用于IN BOOLEAN MODE。
          4.如果表中的行数少于3行，则全文本搜索不返回结果（因为每个词 或者不出现，或者至少出现在50%的行中）
          5.忽略词中的单引号。例如，don't索引为dont。
          6.不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。
          7.仅在MyISAM数据库引擎中支持全文本搜索
      
18、查询扩展：能找出可能相关的结果，即使它们并不精确包含所查找的词
           使用方法：select note_text from table_name where Match(note_text) Against('anvils' WITH QUERY EXPANSION);
          
             
19、布尔文本搜索：即使没有FULLTEXT索引也可以使用
      操作符说明：+  包含，词必须存在
                 -  排除，词必须不存在
                 >  包含，而且增加等级值
                 <  包含，且减少等级值
                 () 把词组成子表达式（允许这些子表达式作为一个组被包含、排除、排序等）
                 _  取消一个词的排序值
                 *  词尾的通配符
                 "" 定义一个短语（与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语）
          示例：匹配包含rabbit和bait的行：select note_text from table_name where Match(note_text) Against('+rabbit +bait' IN BOOLEAN MODE);
               不指定操作符，匹配包含rabbit和bait中的至少一个词的行：select note_text from table_name where Match(note_text) Against('rabbit bait' IN BOOLEAN MODE);
               匹配短语rabbit bait而不是匹配两个词：select note_text from table_name where Match(note_text) Against('"rabbit bait"' IN BOOLEAN MODE);
               匹配rabbit和carrot，增加前者的等级，降低后者的等级：select note_text from table_name where Match('>rabbit <carrot' IN BOOLEAN MODE);
               匹配safe和combination，降低后者的等级：select note_text from table_name where Match(note_text) Against('+safe +(combination)' IN BOOLEAN MODE);
               
20、查看数据表状态（引擎、创建时间、更新时间等）：SHOW TABLE STATUS FROM db_name WHERE NAME='table_name';

21、修改数据表引擎：alter table table_name engine=innodb; 
                  alter table table_name engine=myisam;
                 
                
22、insert一次插入多条数据：insert LOW_PRIORITY into table_name(col1,col2,col3,col4...) values(value1,value2,value3,value4...),(value11,value22,value33,value44...),...
        注：LOW_PRIORITY降低插入语句的优先级，降低对查询语句的性能的影响；每个值括号里的数据顺序与列对应，这样比用多个单条插入性能高

23、插入检出的数据，insert into table_name1(col1,col2,col3,col4...) select col1,col2,col3,col4... from table_name2;（确保主键不会重复）

24、更新多个列：update table_name set col1 = 'xxx',col2 = 'xxxx' where colx = 'x';（不加where字句更新所有行，使用where前应先使用select对where子句测试确保正确）
    IGNORE关键字：使用update是若发生错误则整个操作被取消（错误前更新的被恢复原值），使用IGNORE后即使发生错误也继续更新，用法update IGNORE table_name......
    
    
25、删除数据：delete from table_name where col1 = 'xxx';（不加where字句删除所有行，使用where前应先使用select对where子句测试确保正确）
    更快的删除：truncate table语句，删除所有行，实际上是删除原来的表并重新创建一个表，而不是逐行删除表中的数据
            
26、数据表的创建：
    创建表时主键可以为多列且不能为null（null和空串不一样）
    使用AUTO_INCREMENT设置该列自动自增（每个表只允许一个AUTO_INCREMENT列，而且它必须被索引），可以使用select last_insert_id()获取最后一个AUTO_INCREMENT的值
    默认值：create table中使用DEFAULT关键字指定   例：quantity int NOT NULL DEFAULT 1,（quantity列为指定时使用1，mysql只支持常量）

27、修改/更新表：
    给表添加一个列：alter table table_name ADD col_name CHAR(20);
    删除表中的一个列：alter table table_name drop column col_name;

28、删除表：DROP table table_name;

29、重命名表：RENAME table table_name1 to table_name2;

30、视图：
        为什么使用视图： 
                     1、重用SQL语句
                     2、简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。
                     3、使用表的组成部分而不是整个表。
                     4、保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。
                     5、更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。
        视图的规则和限制：
                       1、与表一样，试图必须唯一命名（不能给视图取别的视图或表相同的名字）
                       2、对于可以创建的视图数目没有限制
                       3、为了创建视图必须具有足够的访问权限。这些限制通常由数据库管理人员授予。
                       4、视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图
                       5、order by可以用在视图中，但如果从该视图检索数据select中也含有order by，那么该视图中的order by将被覆盖
                       6、视图不能索引，也不能有关联的触发器或默认值。
                       7、视图可以和表一起使用。例如，编写一条联结表和视图的select语句。
        视图的使用：例：
                     1、利用视图隐藏复杂的SQL，简化复杂的联结
                        创建：CREATE VIEW productcustomers AS SELECT cust_name，cust_contact，prod_id 
                             FROM customers，orders，orderitems 
                             WHERE customers.cust_id = orders.cust_id
                              AND orderitems.order_num = orders.order_num;
                        使用：SELECT cust_name,cust_contact FROM productcustomers WHERE prod_id = 'TNT2';
                     2、重新格式化检索出的数据
                     3、用视图过滤不想要的数据（如果从视图检索数据时使用了一条where子句，则视图中的和传递给视图的两个where子句将自动组合）
                     
31、存储过程：一条或多条SQL语句的集合
      为什么使用存储过程：
                      1、通过把处理封装在容易使用的单元中，简化复杂的操作
                      2、由于不要求反复建立一系列处理步骤，这保证了数据的完整性。如果所有开发人员和应用程序都使用同一存储过程，则所使用的代码都是相同的。这一点的延伸就是防止错误。
                         执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性。
                      3、简化对变动的管理。如果表名，列名或业务逻辑等有变化，只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化。
                      4、提高性能，因为使用存储过程比使用单独的SQL语句要快。
                      5、存在一些只能用单个请求中的mysql元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码
       mysql将编写存储过程的安全和访问与执行存储过程的安全和访问区分开来。即使你不能（或不想）编写自己的存储过程，也可以在适当的时候执行别的存储过程
      执行存储过程：CALL productpricing(@pricelow,
                                       @pricehigh,
                                       @priceaverage);执行名为productpricing的存储过程，它计算并返回产品的最低价、最高价和平均价格
      创建存储过程：CREATE PROCEDURE productpricing()
                   BEGIN
                      SELECT Avg(prod_price) AS priceaverage
                      FROM product;
                   END;如果存储过程接受参数，它们将在()中列举出来。没有参数后面的()仍然需要。BEGIN和END限定存储过程体。
         注：如果使用mysql命令行创建存储过程由于;作为语句分隔符会导致创建失败出现语法错误，为了避免错误上述语句可以进行如下修改
                   DELIMITER //
                   CREATE PROCEDURE productpricing()
                   BEGIN
                      SELECT Avg(prod_price) AS priceaverage
                      FROM product;
                   END//
                   DELIMITER ;
          DELIMITER //告诉命令行//作为新的语句分隔符，创建完成后再使用DELIMITER ;修改回;，注意DELIMITER后必须有空格，内部例如END后不能加空格。除\外任何字符都可作为语句分隔符
    删除存储过程：DROP PROCEDURE productpricing;
                 DROP PROCEDURE IF EXISTS productpricing;仅当存在时删除
     存储过程参数使用：不显示结果，将结果返回给指定的变量
                     CREATE PROCEDURE productpricing(
                        OUT pl DECIMAL(8,2),        #关键字OUT指出传出一个值返回给调用者，同时存储过程支持IN（传递给存储过程）和INOUT（对存储过程传入和传出）
                        OUT ph DECIMAL(8,2),
                        OUT pa DECIMAL(8,2)
                     )
                     BEGIN
                        SELECT Min(prod_price)
                        INTO pl                        #通过INTO关键字保存到相应变量
                        FROM products;
                        SELECT Max(prod_price)
                        INTO ph
                        FROM products;
                        SELECT Avg(prod_price)
                        INTO pa
                        FROM products;
                     END;   

             

  
  
